1. 제어문이란?
- 제어문은 프로그램의 흐름을 제어할 수 있도록 도와주는 실행문을 말함
- 제어문의 종류 : 조건문, 선택문, 반복문

2. 조건문
- 조건문은 조건식의 값이 참(true)인지 아니면 거짓(false)인지에 따라
  실행문의 제어가 결정되는 구문

  예를 들어, 질의응답창을 이용해 사이트 방문자가 좋아하는 숫자를 입력받습니다.
  이때 입력된 값을 2로 나누어 나머지 값이 0이라면? 
  "당신이 좋아하는 숫자는 짝수 입니다." 라고 출력되게 한다고 합시다.
  이렇게 수를 나눈 나머지 값이 조건식의 만족 여부에 따라 출력되는 실행문을 
  달리 나타나게 하려면 조건문을 사용해야한다.

- 조건문의 종류 : if문, else문, else if문

    if문 : 조건식을 만족(true) 할 경우에만 실행문 실행 함.
            
            if(조건식){

              실행문;

            }

           ------------------------> if_1.html 파일생성 및 실습
    
    else문 : else문은 if문의 조건식을 만족(true) 할 경우와 
             만족하지 않았을(false) 경우따라 실행되는 실행문이 달라지게 하는 구문
             즉 ! 두 가지의 결과가 나올수 있다.

             if(조건식){
              실행문 1;
             }
             else{
              실행문 2;
             }

             해석 : 먼저 if문의 조건식을 판단해서 조건식의 결과가 참일 경우 
                    실행문 1을 실행하고 else는 판단안하고 빠져나간다.
                    하지만 if문의 조건식의 결과가 거짓일 경우 
                    else 구문의 { } 중괄호 내부에 작성된 실행문 2만 실행한다.

          ------------------------> else_1.html 파일생성 및 실습


    else if문 : 두 가지 이상의 조건식과 정해 놓은 조건식을 만족하지 않았을때 실행되는 실행문으로 이루어져 있는 구문

            해석 : 가장 위에 있는 조건식1부터 조건식3까지 차례로 검사를 한 후 만족(참, true)하는 값이 나오면 
                   그에 해당하는 실행문을 실행하고 전체 조건문을 종료함.
                   하지만 조건식중~ 만족(참, true)하는 값이 하나도 없을때는 
                   가장 아래쪽에 작성해 놓은 else문의 중괄호{ ... } 에 있는 실행문을 실행 시키고 종료함.

 
                if(조건식1){

                  // if의 조건식1에 만족(true)하면 실행될 코드1;

                }
                else if(조건식2){

                  // if의 조건식1이 거짓일 경우 
                  // else if의 조건식2를 판단하여 조건식2가 참이면 실행될 코드2;
                  // -> 실행될 코드2를 실행시키고 전체 if, else if, else 구문 자체를 빠져나감.

                  실행문2;

                }
                else if(조건식3){

                  // if의 조건식1과 else if의 조건식2의 결과값이 false이고
                  // else if의 조건식3의 결괏값이 true일 경우 실행문3이 실행된다.
                  // 그리고 아래에 작성된 else if 또는 else 구문은 검사 안하고 빠져나감

                  실행문3;
                }
              
                else{
                  // 조건식1,2,3, 모두 만족하지 않을 경우 실행
                  실행문5;

                }
          ------------------------------------------------------------------> elseif_1.html

          중첩 if문 : if문 블럭 내부에 안쪽 if문 작성하는 구조의 구문!

              if(조건식1){ // 바깥쪽 if문

                if(조건식2){ // 안쪽 if문

                  실행문;

              }              

            }

3. 선택문 switch문
    - 여러 개의 조건을 확인하여 해당하는 코드 블록{}중괄호 안에 작성된 실행문을 실행 시키는 제어문 중 하나
    - 조건이 많을때 if else if 구문 보다 가독성을 높이고 코드의 간결함을 유지하는데 유리한 제어문 중 하나이다.

      switch( 평가될_표현식 ){

        case value1:
          // value1이 평가될_표현식의 결괏값과 일치할때 실행될 코드작성;

          // 현재 case 블록을 종료하고 switch문을 빠져나간다.
          // 주의 할점 : break를 작성하지 않으면 
             그다음 case불록을 안달아 감사하기 떄문에 꼭! break; 구
             문은 case유형의 가방 마지막줄에 한번은 꼭! 작성한다. 
             break;

        case value2: 
          // value2이 평가될_표현식의 결괏값과 일치할때만 실행될 코드 작성;
  
          break;

        ...

        default: 
          // 위에 작성된 어떤 case유형의 value들도 평가될_표현식의 결괏값과 일치하지 않을때 실행될 코드 작성

          break; // 마지막 default 자리에 적는 break는 생각 가능하다.
                
      }

----------------------------------------------------------------------------------------------------------------------------------

그림 
      let 변수 = 값;

      switch(변수){
        
        case 값1:
          실행문1;
          break;

        case 값2:
          실행문2;
          break;
        
        ...

        default:
          실행문3;
          break;


      }

--------------------------------------> switch_1.html

elseif_1.html 파일에 작성된 if else if else 구문들을 모두 switch문으로 변경해보자

--------------------------------------> elseif_1.html 복사해서 파일명을 switch_2.html 변경해서 작성






   4. 반복문
      - 반복문을 이용하면 실행문을 원한는 횟수만큼 반복하여 실행시킬 수 있음
      - 반복문의 종류 : while, do while, for
      
      주제1. 반복문은 왜 사용할까?  repeat-1.html

      - while 반복문 ?
          1. while 반복문은 조건식을 만족하는 동안까지만 실행문을 여러번 반복해서 실행시킬수 있는 반복문 종류 중 하나도

          2. 문법 
                    
                    let 변수 = 초깃값; // 1. 변수의 조건을 판단하는 조건 초기값 저장

                    while(조건식){ // 2. 그 다음 while문을 작성해 사용

                      
                      실행문;

                      증감식;

                    }

                    wehile반복문의 실행 순서
                    1. 조건식을 검사하고 만약 참 일 경우에만?
                    2. 중괄호{} 내부에 있는 실행문 및 증감식을 실행한다.
                    3. 다시 조건식을 검사하고 만약 거짓일 경우에만? while 반복문을 빠져 나오고 
                       참 일 경우에는? 1. 2. 를 순서대로 다시 반복해서 수행한다.

                    ----------------------------------------> while_1.html
                    ----------------------------------------> whlie_2.html  
                    ----------------------------------------> whlie_3.html

      - do while 반복문?    
          : 일단 반복 실행할 명령을 한 번 먼저 실행한 후, 
            조건식을 판단해서 true이면 do{}내부에 작성된 반복실행할 명령 코드를 실행하고,
            조건식을 판단해서 false이면 반복 실행할 명령 코드를 실행하지 않고 
            do{} while() 반복문을 빠져나감.


            문법
                do{

                  반복 실행 할 명령;
                
                }while(조건식)
            ----------------------------------------> do_whlie.html


      - for 반복문?
          : 조건식을 만족할 때 까지 특정 실행문을 반복해서 실행하는 구문

          - 문법
                for( 초기값; 조건식; 증감식 ){
                  let i=1; i<10;  i++

                  실행문;

                }
          
          - 실행 순서
              초기값 -> 조건식 -> 실행문 -> 증감식
                   -> 조건식 이 거짓일 경우만 for{}반복문 빠져나감.


                   ----------------------------------------> for_1.html
                   ----------------------------------------> for_2.html

          참고. 지금까지 살펴본 for, while, do while반복문들 중에서 어떤 반복문을 사용해야 할까?

            for



      - break문
        - 반복문인 while 또는 for문에서 break문을 작성해서 실행하면 조건식의 결과와 상관없이 강제로 반복문을 종료할때 사용하는 예약어 구문.
          ----------------> break_1.html

      - continue문
        - continue문은 반복문내에서 사용하는 예약어
          1. while반복문 안에 있는 continue문은 다음에 오는 "실행문은 무시하고 조건식에서 조건검사를 실행해" 라고 명령하는 구문

          2. for반복문 안에 있는 continue문을 실행할 경우에는 continue문 
             다음에 오는 실행문은 무시해 버리고 바로 증감식으로 이동하여 증감 연산을 실행
           ----------------> continue.html


      - 중첩 for문에서  
          - for문 안에 for문을 사용하는 구문.

          - 기본 문법
                    for(초기값; 조건식; 증감식){  // 바깥쪽 for문
                      for(초기값; 조건식; 증감식){ // 안쪽 for문
                        반복할 소스(실행문);
                      }
                    }

            ----------------> double_for_1.html
            ----------------> double_for_2.html

            
            ----------------> seat_result.html