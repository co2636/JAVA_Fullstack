
/*
 		업캐스팅이란?
 			부모클래스자료형의 참조변수에 여러 자식객체 메모리 주소를 대입하여 저장시키는 것 
 			
 */
// 부모클래스 역할을 함 
class Parent{
	public void parentPrn() {
		System.out.println("부모 Parent클래스의 parentPrn메소드");
	}
	
}
// 자식 클래스 역할을 함 
class Child extends Parent{
		
	/*	Parent 부모클래스로 부터 상속받은 메소드 
		
	 	public void parentPrn() {
			System.out.println("부모 Parent클래스의 parentPrn메소드");
		}
		
	 */
	
	public void childPrn() {
			System.out.println("자식 Child 클래스의 childPrn메소드");
	}
}


public class Ex2 {

	public static void main(String[] args) {
		// 주제1. 일반 기본 자료형의 형변환(캐스팅) 
		Parent p = new Parent();
		
		// 4바이트 크기의 변수 a 를  선언하고 10을 저장(작은 데이터)
		int a = 10;
		
		// 8바이트 크기의 변수메모리에  정수 하나를 저장할 변수 b 를 선언하고 20L을 저장 (큰 데이터)
		long b = 20; //20L
		
		// 8 바이트 크기의 b 변수메모리에 4바이트 크기의 a 변수메모리에 저장된 정수 10(작은데이터)를 저장하려고 할때
		// 개발자가 직접 형변환(캐스팅)을 해서 int a = 10 을  long 자료형 b 변수에 저장할 데이터의 크기 8바이트 크기로 10L로  만들어 주고 저장할 수 있지만 
//		b = (long)a;  < --  이렇게 한다는 의미 
		// 자동 형변환(캐스팅)이  작성되어서 자동으로 10 -> 10L로 변경되어 b 변수에 저장되게 된다.
		b = a; // 자동형변환(캐스팅)
		// 만약 강제 형변환(캐스팅)을 작성한다면 아래와 같이 작성해 놓으면 된다.
//		b = (long)a;
		
//	-----------------------------------------------------------------------------------------------------------------------------------------------
		
		// 주제2. 객체메모리의 주소번지를 대입하기 위한 참조변수를 만들때 가장 앞에 작성하는 참조자료형(래퍼런스 자료형)
		//																																	(클래스 자료형, 인터페이스형...)
		
		// 자식클래스(생성하는 객체메모리의 클래스) 자료형을 사용하여 참조변수 c 를 만들고  = 대입연산자를 이용해 
		// Child 객체메모리를 생성한 후 객체 메모리 주소번지 저장 
		Child c = new Child();
			      c.parentPrn(); // 부모객체의 멤버(인스턴스 메소드) 접근후 호출 가능
			      c.childPrn(); // 자기자신(자식) 객체의 멤버(인스턴스 메소드) 접근 후 호출 가능 
			      /*
			       
			       [ 0x12 ] = 						0x12
			        				-----------------------------------
			       						  Parent 부모객체의 멤버(메소드)
			       							
			       								parentPrn(){}
			       					
			       					-----------------------------------
			       						  Child  자식객체의 멤버(메소드)
			       							
			       								childPrn(){}
			       						
			       					-----------------------------------	
			       						
			       						
			       */
		
			      //  업캐스팅
			      // 문법 			  부모클래스자료형 	참조변수명 	=		new		자식클래스의 생성자();
					      // 순서1.  부모클래스자료형 참조변수를 먼저 선언
					      Parent p1;
					      
					      // 순서2. 자식객체 메모리를 생성해서 주소번지를 부모클래스 자료형으로 선언한 참조변수에 저장시키자.
					      p1 = c;  // 업캐스팅 (형변환) (자동으로 업캐스팅 가능)
//					      p1 = (Parent)c; // 강제 업캐스팅가능.
					      
					      
					      /*
					       
							       [ 0x12 ] = 						0x12
							        				-----------------------------------
							       						  Parent 부모객체의 멤버(메소드)
							       							
							       								parentPrn(){}
							       					
							       					-----------------------------------
							       						  Child  자식객체의 멤버(메소드)
							       							
							       								childPrn(){}
							       						
							       					-----------------------------------	
							       						
					       						
					       */
					      	
					      // Parent p1 부모 클래스 자료형의 참조변수로 부모 Parent 클래스에 작성해놨던 멤버(ParentPrn() 메소드) 에만 접근해서 호출 가능 
					      // 자식 Child 클래스에 작성 해놨던 멤버 (childPrn()메소드)는  접근해서 호출 할 수 없다.
					      p.parentPrn();
//					      p.childPrn(); 호출 불가능 
		
					      // 업캐스팅의 단점을 보완하기 위해 다운캐스팅 개념이 나옴 
					      
		
		
		
		
		
		
	}

}
