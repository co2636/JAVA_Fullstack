
// 예제 : 자바 객체지향프로그래밍  특징 중 하나 다형성?

/*
 		다형성 ?
 		- 하나로 다양한 형태의 성질을 지닐수 있도록 하는 방법 
 		
 		다 : 다양한
 		형 : 형태의
 		성 : 성질을 지닐수 있다.
 		
 		다양한 형태의 성질을 지닐 수 있는 것들
 		
 		1. 메소드 오버로딩 : 같은 하나의 메소드 이름을 사용하여 다양한 기능의 메소드를 여러개 정의 하는 것.
 		
 		2. 생성자 오버로딩 : 같은 이름으로 생성자를 여려개 정의하는것.
 		
 		3. 업 캐스팅 ?
 			- 부모 클래스 자료형의 참조변수 하나를 만들어 여러 자식 객체의 주소값을 대입해서 저장하는 것.
 			
 			예) 
 							부모 클래스 A
 							자식 클래스 B,	자식 클래스 C
 			
 							부모클래스자료형   참조변수선언 = new  자식생성자();
 										A							a		  =  new   		B();
 																	a		  =  new 			C();

 			
 			
 							B b = new B();
 							C c = new C();
 							참조변수를 여러개 만들어서 사용해야함.
 							즉 ! 코드 길이도 늘어날 뿐 아니라 유지보수도 어렵다.
 							
 			
 			
 */

// 부모역할을 하는 클래스 
class Tv{
	boolean power;  // 전원 켜짐 true, 전원 꺼짐 false 
	int channel;		// 현재 채널 번호값 저장 
	
	//public Tv(){  }
	
	// 전원을 키거나 끄는 기능의 메소드 
	// 만약 power 변수값이 false 면 -> true 로 변경해서 저장 
	// 만약 power 변수값이 true 면 -> false 로 변경해서 저장 
	public void power() {
		this.power = !power;
	}
	
	// 현재 채널 번호를 1 증가시키는 기능의 메소드
	// 만약 channel 변수값이 10일때 이 메소드를 호출하면 ++ 되어 1 증가시킨다.
	public void channelUp() {
		++channel;
	}
	
	// 현재 채널 번호를 1 감소시키는 기능의 메소드
	// 만약 channel 변수값이 10일때 이 메소드를 호출하면 -- 되어 1 감소시킨다.
	public void channelDown() {
		--channel;
	}
	
}

// Tv 의 기능 기능이 있는 TV 부모클래스를 상속받아 Tv 화면에 자막내용을 보여줄수 있는 CaptionTv 자식 클래스 설계
// (기본 기능 + 자막내용 출력 기능)
class CaptionTv extends Tv{
	/*
	 boolean power;
	 int channel;		

	public void power() {
		this.power = !power;
	}
	
	public void channelUp() {
		++channel;
	}
	
	public void channelDown() {
		--channel;
	}
	 */
	
	
	// CaptionTv의 멤버 
	String text; // 자막내용을 보여주기 위해 저장할 변수 
	
	public void caption() {
		System.out.println("캡션기능이 추가된 CaptionTv");
	}
	
}
/*
 		상속계층관계도   -   두 클래스의 관계를 표현한 그림
 			
 						부모 클래스명  			Tv
 						
 								^                       ^
 								 |						  |
 								 |						  |
 								 
 						자식 클래스명 		CaptionTv
 -------------------------------------------------------------
													Tv 클래스의 멤버 
													
														power 변수, 
														channel 변수
														
														power() 메소드, 
														channelUP() 메소드, 
														channelDown() 메소드 
														
												-------------------------------------------
												
													CaptionTv 클래스의 멤버
														
														text 변수
														
														caption() 메소드 
														
 		
 */


public class Ex1 {

	public static void main(String[] args) {

		// 부모클래스자료형   참조변수선언  =  new  부모객체메모리 생성;
					Tv						tv			  =   new      Tv();
					
																	/*
																	 			Tv 객체 메모리의 멤버 
																	 					0x10
															0x10 = -----------------------------------	
																					power 변수, 
																					channel 변수
																					
																					power() 메소드, 
																					channelUP() 메소드, 
																					channelDown() 메소드 
																		-----------------------------------			
																	 */
					
		// 업캐스팅
		// - 부모 클래스자료형의 참조변수에 여러 자식 객체메모리를 생성해서 그 주소를 다양하게 대입하는 것.
					
		// 업캐스팅 작성방법 
		// 부모클래스자료형   참조변수  =  자식객체메모리 생성;
						Tv					t1     =  new CaptionTv();
						
		// 결론1 : 부모클래스자료형으로 선언한 참조변수에 상속관계의 자식개체메모리의 주소를 저장하는 것 가능
		
		// 생성한 객체 메모리의 주소값(0x11.....) 을
		// 1. 같은 클래스자료형의 참조변수에 저장하는 것과 
		//2. 부모클래스자료형의 참조변수에 저장하는 것의 차이점을 살펴보자
						
				//1. 같은 클래스자료형의 참조변수에 자기자신의 객체를 생성해 주소값 저장 
				//  결론 : 상속받은 부모 객체메모리 뿐 아니라 자식객체 메모리의 멤버에도 접근 가능 
						
						CaptionTv  c1 = new CaptionTv();
											c1.power = true;
											c1.channel = 0;
											c1.power();
											c1.channelUp();
											c1.channelDown();
										
											c1.text = "캡션TV";
											c1.caption();
										
				/*
				 	[   0x200   ]  =   			0x200
						 					-------------------------------
						 						Tv 부모객체의 멤버 
															
													power 변수, 
													channel 변수
													
													power() 메소드, 
													channelUP() 메소드, 
													channelDown() 메소드 
													
											-------------------------------
											
												CaptionTv 자식객체의 멤버
													
													text 변수
													
													caption() 메소드 
						 
				 
				 */
			
			//2. 부모클래스자료형의 참조변수에 자식객체메모리 생성 후 주소 번지 저장
			// 요약 : 업캐스팅 
			// 결론 : 업캐스팅을 하면 부모클래스자료형의 참조변수로는 생성된 객체가 자식객체메모리 일지라도 
			//			 생성된 자식객체 메모리에 포함되어 있는 TV 부모객체 메모리의 멤버만 접근가능 
			Tv	t2 = new CaptionTv();
					t2.power = true;
					t2.channel = 1;
					t2.power();
					t2.channelUp();
					t2.channelDown();
					
//					t2.text = "캡션TV2"; // 접근해서 사용 불가능 
//					t2.caption(); // 접근해서 사용 불가능 
					
					
			/*
		 	[   0x201  ]  =   			0x201
				 					-------------------------------
				 						Tv 부모객체의 멤버 
													
											power 변수, 
											channel 변수
											
											power() 메소드, 
											channelUP() 메소드, 
											channelDown() 메소드 
											
									-------------------------------
									
										CaptionTv 자식객체의 멤버
											
											text 변수
											
											caption() 메소드 
				 
		 
		 */
					
		/*
		 		최종 결론 
		 		
		 		- 부모 클래스 자료형의 참조변수에 자식 객체메모리 생성후 주소를 저장(업캐스팅)  해 놓으면
		 		   부모클래스 자료형으로 만든 참조변수는 자식객체 메모리의 주소번지를 저장해 놓을 지라도 
		 		   부모 클래스 내부에 만들어 놓은 멤버(변수와 메소드)에  접근을 할뿐 자식 객체 메모리에 있는 멤버 (변수와 메소드)에 접근이 불가능하다.
		 		   
		 		- 업캐스팅의 장점 
		 			: 부모클래스 자료형의 참조변수 하나만 만들어 여러 자식객체 메모리의 주소번지를 대입해서 저장 할 수 있다.
		 				그러므로 참조변수는 하나만 생성해서 사용되니 메모리 낭비 줄일수 있음 
		 			
		 		   업캐스팅의 단점 
		 		 	: 부모 클래스 내부에 만들어 놓은 멤버(변수와 메소드)에  접근을 할뿐 
		 		 		자식 객체 메모리에 있는 멤버 (변수와 메소드)에 접근이 불가능하다.
		 
		 */
						
						
						
	}

}
