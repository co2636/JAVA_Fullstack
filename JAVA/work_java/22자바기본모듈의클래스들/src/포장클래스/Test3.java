package 포장클래스;
/*
문제 : static 메소드를 이용한 객체 생성
 
	기본자료형 데이터를 이용한 Wrapper 클래스의 객체 생성방법에는(간단히 줄여서 박싱에는)
	다음과 같이 두가지가 존재 한다. 
		1번. 키워드 new 를 이용한 일반적인 객체생성방법
		2번. static 메소드를 이용한 객체 생성방법
	그런데 앞서 보인 것은 모두 키워드 new 를 이용하는 방법 이었습니다.
	그래서 지금 위의 2번에서 static 메소드를 이용한 객체생성 방법도 존재한다는 힌트를 제공하고 있습니다.
	이 힌트를 근거로 API문서를 참조하자.
	그리고 다음 예제를 static 메소드를 이용해서 박싱 처리하는 형태로 변경 해 보자.

*/

public class Test3 {

	public static void main(String[] args) {
		
	//1번 박싱 방법. new 와 생성자를 이용해 방식하는 방법
		//Integer iValue1 = new Integer(10);
		
	//바로위의 1번 박싱방법을이용한 방법을 2번 static 메소드를 이용하여
	//박싱하는 방법으로 작성 해보기, 참조변수 iValue1
		Integer   iValue1 = Integer.valueOf(10);
		
				
	//1번 박싱 방법. new 와 생성자를 이용해 방식하는 방법
		//Integer iValue2 = new Integer(10);
		
	//바로위의 1번 박싱방법을이용한 방법을 2번 static 메소드를 이용하여
	//박싱하는 방법으로 작성 해보기, 참조변수 iValue2	
		Integer iValue2 = Integer.valueOf(10);
		
	//두 iValue1, iValue2 참조변수가 참조 하고 있는 객체메모리의 주소가
	//같은지 비교하기
		//두참조변수가 동일한 객체 메모리주소를 참조하면? <- if 조건문
		if(iValue1 == iValue2) {  
			//"iValue1과 iValue2는 동일 객체 참조" <-출력문 
			System.out.println("iValue1과 iValue2는 동일 객체 참조");
		
		//두참조변수가 다른 객체 메모리 주소를 참조하면? <- else 문
		}else {
			//"iValue1과 iValue2는 다른 객체 참조" <- 출력문
			System.out.println("iValue1과 iValue2는 다른 객체 참조");	
		}
		//-----------------------------------------------------
		
		//1번. 키워드 new 를 이용한 일반적인 객체생성방법(박싱방법)
		// 과....
		//2번. static 메소드를 이용한 객체 생성방법 (박싱방법)
		//의 실행 결과를 보면.. 박싱방법의 차이점이 있는데..
		//두가지 박싱 방법중 어느것이 더 효율적인가요??
		//: ->   
		/*
		valueOf메소드는 객체생성요청으로 전달되는 값에 해당하는 객체가 이미 한번이라도 만들어진 상태라면
		새로운 객체를 생성하지 않고 기존에 생성된 객체의 주소값을 반환받아 사용합니다.
		*/
		
			
		//만약 두개중 하나의 방법이 효율적이라면 그이유를 쓰시오.
		//: ->
		/*
		new 연산자를 사용하는 래퍼객체 생성 방법은  각각의 객체메모리가 만들어지고 
		static 메소드를 호출해서 래퍼객체 생성방법은 저장되는 기본값이 같으면 
		처음 만들어진 래퍼객체메모리를 재활용 하기 때문에 static 메소드를 호출해서 래퍼객체를 생성하는 방법이 더 효율적이다.
		*/
	
	}

}











