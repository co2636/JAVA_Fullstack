
public class BitLogicExample {

	public static void main(String[] args) {
		
		System.out.println("45 & 25 = " + (45 & 25)); // 9 
		
		/*
		 	45와 25를 비트 논리곱 & 연산 해보자
		 	
		 	45   2진수로 표현하면 	00101101
		 	25	2진수로 표현하면  00011001
		 	
		 	
		     00101101
		  	 00011001
		 	-----------	&
		 	 00001001
		 	 
		 	 1 X 2의 3승  		-> 8
		 	 1 X 2의 0승 		-> 1
		 	 
		 	 -> 8 + 1 = 9
		 	
		 */
		
		System.out.println("45 | 25 = " + (45 | 25)); // 61
		
		/*
		 	45와 25를 비트 논리합 | 연산 해보자
		 	
		 	45   2진수로 표현하면 	00101101
		 	25	2진수로 표현하면  00011001
		 	
		 	
		     00101101
		  	 00011001
		 	-----------	|
		 	 00111101
		 	 
		 	 1 X 2의 5승 		-> 32
		 	 1 X 2의 4승 		-> 16
		 	 1 X 2의 3승 		-> 8
		 	 1 X 2의 2승  		-> 4
		 	 1 X 2의 0승 		-> 1
		 	 
		 	 -> 32 + 16 + 8 + 4 + 1 = 61
		 	
		 */
		
		System.out.println("~45  = " + (~45 )); // -46
		
		/*
		 	45를 비트 논리부정연산 ~ 연산 해보자
		 	
		 	45   2진수로 표현하면 	00101101
		 	
		 	
		     00101101
		  	-----------	~
		 	 11010010			<- 최상위 비트자리의 값이 1이면 음수이므로 - 46
		 	 
		 	 1 X 2의 6승 		-> - 64
		 	 1 X 2의 4승  		-> 16
		 	 1 X 2의 1승 		-> 2
		 	 
		 	 -> (-64) + 16 + 2 = -46
		 	
		 */
		
		System.out.println("------------------------------------------");
		/*
		 	비트 논리 연산자들을 사용해 비트 논리연산이 왜 필요한지 예를 하나 들어보자
		 	
		 		C언어로 만든 프로그램에서 외부서버에 저장된 JAVA언어로 만든 프로그램으로 데이터를 전달한다고 가정하자.
		 		
		 		C언어에는 unit8_t 이라는 타입이 있는데, 이 타입은 1byte 크기를 가지면서 0 ~ 255 사이의 값을 컴퓨터 변수 메모리에 
		 		저장할 수 있다.
		 		
		 		반면 JAVA언어에는 unit8_t 라는 타입이 없고 대신 byte 타입이 있다.
		 		JAVA에서 byte 타입으로 변수를 만들어 저장할 값의 허용 범위는 -128 ~ 127 사이의 값이다.
		 		
		 		C언어로 만든 프로그램이 unit8_t 타입 136 값을 JAVA언어로 만든 프로그램으로 전달 시 2 진수로 보내면
		 		JAVA언어로 만든 프로그램에서는 2진수를 -120으로 읽게 된다.
		 		
		 		C언어에서 unit8_t 타입의 136을 2진수로 변환 ->  10001000 후
		 		JAVA언어에서 byte 타입의 1byte 크기의 변수 메모리에 저장하려고 할때 10001000은  -120으로 저장
		 		
		 		-120을 C언어로 만든 프로그램이 보낸 136으로 복원하고 싶다면 
		 		-120과 255를 비트 논리곱(&) 연산을 수행 하면 된다.
		 		
		 		
		 */
		byte receiveData = -120;
		/*
		 	1byte = 8bit
		 	4byte = 32bit 이므로 총 32칸에 2진수가 저장된다고 가정하자
		 	
		 	byte receiveData 변수에 저장된 -120은 255와 비트 논리곱 & 연산 전 
		 	아래와 같이 int 타입의 2진수로 바뀐 후 컴퓨터 변수 메모리에 저장하게 된다.
		 	
		 	1byte 					1byte					1byte				  1byte	
	[][][][]	[][][][]		[][][][][][][][]		[][][][][][][][]		[][][][][][][][]			
		11111111			   	  11111111			11111111 		   10001000    (-120)
		00000000		00000000		00000000		11111111			(255)
		---------------------------------------------------------------	&
		00000000		00000000		00000000		10001000		(136)
		 */
		
		// 방법 1. 비트 논리곱 연산 & 으로 복원값 136 얻기 
		int usignedInt1 = receiveData & 255;
		System.out.println( "usignedInt1 : "+ usignedInt1);
		
		// 방법 2. 	자바 API를 이용해서 복원값 136을 만들어 반환받자 
		int unsignedInt2 = Byte.toUnsignedInt(receiveData);
		System.out.println("unsignedInt2 : " + unsignedInt2);
		
		
		int unsignedInt = Byte.toUnsignedInt(receiveData);
		
		System.out.println(" " + unsignedInt);
		
	}

}
