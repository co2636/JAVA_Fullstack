/*
	객체 지향 프로그래밍 기법 3단계
	
	1 단계.  자동차 객체 모델링 
	
			데이터 
					색상 : 자동차의 색상을 나타내는 문자열 데이터
					모델명 : 자동차의 모델명을 나타내는 문자열 데이터 
					제조연도 : 자동차의 제조연도를 나타내는 정수 데이터 
					현재 속도 : 자동차의 현재 속도를 나타내는 정수 데이터 
					 연료량 : 자동차의 연료 잔량을 나타내는 정수 데이터 
					 전원 상태 : 엔진의 켜짐 또는 꺼짐 상태를 나타내는 boolean 데이터 
					 
			동작 (기능)
					시작 : 자동차의 엔진을 켜는 기능 
					정지 : 자동차의 엔진을 끄는 기능 
					가속 : 자동차의 속도를 증가시키는 기능 
					감속 : 자동차의 속도를 감소시키는 기능 
					주행 : 자동차를 주행하는 기능, 현재 속도를 출력하거나 연료를 소모함 
					연료 보충 : 연료를 보충하는 기능
					
			
*/

// 2단계.  클래스 만드는일 (설계)
public class Car {

	
	// 변수 + 메소드 
	
	// 변수 : 1단계에서 모델링한 데이터들을 저장할 변수 
		
		//	색상 : 자동차의 색상을 나타내는 문자열 데이터
		String color;
		
		//	모델명 : 자동차의 모델명을 나타내는 문자열 데이터 
		String model;
		
		//	제조연도 : 자동차의 제조연도를 나타내는 정수 데이터 
		int year;
		
		//	현재 속도 : 자동차의 현재 속도를 나타내는 정수 데이터 
		int currentSpeed;
		
		//	 연료량 : 자동차의 연료 잔량을 나타내는 정수 데이터 
		int fuelLevel;
		
		//	 전원 상태 : 엔진의 켜짐 또는 꺼짐 상태를 나타내는 boolean 데이터 
		boolean engineStatus;	 // true -> 켜짐 , false -> 꺼짐 
	
	// 메소드 : 1단계에서 모델링한 기능들을 메소드로 표현 

		//		시작 : 자동차의 엔진을 켜는 기능 
		// 메소드명 - start
		// 구현코드 내용 
		//1. 엔진의 전원상태를 켜지게 true 로 설정
		// 2. "모델명의 엔진이 시작되었습니다." <-- 출력 
		void start() {
			engineStatus = true;
			System.out.println(model + "의 엔진이 시작되었습니다. ");
		}
		
		//		정지 : 자동차의 엔진을 끄는 기능 
		//  	메소드명 - stop
		// 구현 코드 내용
		// 1. 엔진의 전원상태를 꺼짐 false 로 설정 
		// 2. "모델명의 엔진이 정지되었습니다." <-- 출력  
		// 3. 엔진이 꺼지면 currentSpeed 변수값을 0으로 변경해서 자동차가 정지함을 나타냄 
		void stop() {
			engineStatus = false;
			System.out.println(model + "의 엔진이 정지되었습니다. ");
			currentSpeed = 0;
		}
		
		//		가속 : 자동차의 속도를 증가시키는 기능 
		void cureentSpeedUp(){
			currentSpeed+= 100;
		}
		
		//		감속 : 자동차의 속도를 감소시키는 기능 
		void cureentSpeedDown(){
			currentSpeed-= 50;
		}
		//		주행 : 자동차를 주행하는 기능, 현재 속도를 출력하거나 연료를 소모함 
		
		//		연료 보충 : 연료를 보충하는 기능
		
		
		
	
}
